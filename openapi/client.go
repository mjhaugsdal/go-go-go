// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Fullmektig Fullmektig, med navn og adresser
type Fullmektig struct {
	// Adresse Adresser/adresselinjer knyttet til fullmektig
	Adresse *[]string `json:"adresse,omitempty"`

	// Navn Navn på fullmektig
	Navn *string `json:"navn,omitempty"`
}

// Person defines model for Person.
type Person struct {
	// ErDoed Om hvorvidt personen er død
	ErDoed bool `json:"erDoed"`

	// Fodselsdato Personens fødselsdato
	Fodselsdato string `json:"fodselsdato"`

	// Navn Personens fulle navn
	Navn struct {
		// Etternavn Personens etternavn
		Etternavn string `json:"etternavn"`

		// Fornavn Personens fornavn
		Fornavn string `json:"fornavn"`

		// Mellomnavn Personens mellomnavn
		Mellomnavn *string `json:"mellomnavn,omitempty"`
	} `json:"navn"`
	Verge *Verge `json:"verge,omitempty"`
}

// Representant Kode og beskrivelse av hvem rollen representerer (ikke innehaver)
type Representant struct {
	// Links Lenker for representant
	Links struct {
		Self struct {
			// Href Self-link for representant
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// Beskrivelse Beskrivelse tilknyttet koden
	Beskrivelse *string `json:"beskrivelse,omitempty"`

	// Kode Kode
	Kode *string `json:"kode,omitempty"`
}

// Representanter Liste med representanter
type Representanter struct {
	// Embedded HAL embedded objekt
	Embedded *struct {
		// Links Lenke for representant
		Links *struct {
			Self *struct {
				// Href Self-link for representant
				Href string `json:"href"`
			} `json:"self,omitempty"`
		} `json:"_links,omitempty"`

		// Representanter Liste med representanter
		Representanter *[]Representant `json:"representanter,omitempty"`
	} `json:"_embedded,omitempty"`

	// Links Lenke for representanter
	Links *struct {
		Self *struct {
			// Href Self-link for representanter
			Href string `json:"href"`
		} `json:"self,omitempty"`
	} `json:"_links,omitempty"`
}

// Rolle Rolle tilknyttet person eller enhet
type Rolle struct {
	// Ansvarsandel Rollens ansvarsandel for selskapets forpliktelser, i brøk eller prosent
	Ansvarsandel *string `json:"ansvarsandel,omitempty"`

	// Enhet Enhet som innehar rolle
	Enhet *RolleEnhet `json:"enhet,omitempty"`

	// Fratraadt Fratrådt fra rolle
	Fratraadt bool `json:"fratraadt"`

	// Fullmektige Liste over fullmektige
	Fullmektige *[]Fullmektig `json:"fullmektige,omitempty"`
	Person      *Person       `json:"person,omitempty"`

	// Rekkefolge Rekkefølgen på rollen i gruppen
	Rekkefolge *int `json:"rekkefolge,omitempty"`

	// Type Rolletype, og beskrivelse av typen
	Type Rolletype `json:"type"`

	// ValgtAv Kode og beskrivelse av hvem rollen representerer (ikke innehaver)
	ValgtAv *Representant `json:"valgtAv,omitempty"`
}

// RolleEnhet Enhet som innehar rolle
type RolleEnhet struct {
	// Links Lenker for tilknyttet enhet
	Links struct {
		Self struct {
			// Href Self-link for tilknyttet enhet
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// ErSlettet Om hvorvidt enheten er slettet
	ErSlettet bool `json:"erSlettet"`

	// Navn Enhetens navn
	Navn []string `json:"navn"`

	// Organisasjonsform Organisasjonsformen til enheten
	Organisasjonsform struct {
		// Links Lenke for organisasjonsform
		Links *struct {
			Self *struct {
				// Href Self-link for organisasjonsform
				Href string `json:"href"`
			} `json:"self,omitempty"`
		} `json:"_links,omitempty"`

		// Beskrivelse Beskrivelse av organisasjonsformen
		Beskrivelse string `json:"beskrivelse"`

		// Kode Kode til organisasjonsformen
		Kode string `json:"kode"`

		// Utgaatt Dato for om organisasjonsformen er utgått
		Utgaatt *string `json:"utgaatt,omitempty"`
	} `json:"organisasjonsform"`

	// Organisasjonsnummer Unik id-nummer tilhørende enheten
	Organisasjonsnummer string `json:"organisasjonsnummer"`
}

// RolleRespons Responsobjekt med navn, rollegrupper og self-link
type RolleRespons struct {
	// Links Lenker knyttet til resultatet
	Links struct {
		Enhet struct {
			// Href Lenke for å hente ut data om selve enheten
			Href string `json:"href"`
		} `json:"enhet"`
		Self struct {
			// Href Self-link for resultatet
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// Rollegrupper Liste med rollegrupper knyttet til enheten
	Rollegrupper []Rollegruppe `json:"rollegrupper"`
}

// Rollegruppe Rollegruppe
type Rollegruppe struct {
	// Roller Liste med alle rollene i gruppen
	Roller []Rolle `json:"roller"`

	// SistEndret Dato for siste endring
	SistEndret string `json:"sistEndret"`

	// Type Rollegruppetype, og beskrivelse av typen
	Type Rollegruppetype `json:"type"`
}

// Rollegruppetype Rollegruppetype, og beskrivelse av typen
type Rollegruppetype struct {
	// Links Lenke for rollegruppetype
	Links struct {
		Self struct {
			// Href Self-link for rollegruppetype
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// Beskrivelse Beskrivelse av rollegruppetypen
	Beskrivelse string `json:"beskrivelse"`

	// Kode Kode for rollegruppetype
	Kode string `json:"kode"`
}

// Rollegruppetyper Rollegruppetype, og beskrivelse av typen
type Rollegruppetyper struct {
	// Embedded HAL embedded objekt
	Embedded *struct {
		// Links Lenke for rollegruppetype
		Links *struct {
			Self *struct {
				// Href Self-link for rollegruppetype
				Href string `json:"href"`
			} `json:"self,omitempty"`
		} `json:"_links,omitempty"`

		// Rollegruppetyper Liste med rollegruppetyper
		Rollegruppetyper *[]Rollegruppetype `json:"rollegruppetyper,omitempty"`
	} `json:"_embedded,omitempty"`

	// Links Lenke for rolletyper
	Links *struct {
		Self *struct {
			// Href Self-link for rollegruppetyper
			Href string `json:"href"`
		} `json:"self,omitempty"`
	} `json:"_links,omitempty"`
}

// Rolleoppdatering Rolleoppdatering i standard CloudEvent format
type Rolleoppdatering struct {
	// Data Rolle data
	Data RolleoppdateringData `json:"data"`

	// Id ID for hendelsen
	Id string `json:"id"`

	// Source Kilden til hendelsen
	Source string `json:"source"`

	// Specversion Versjon for CloudEvent spesifikasjon
	Specversion string `json:"specversion"`

	// Time Dato for hendelsen
	Time string `json:"time"`

	// Type Type for hendelsen
	Type string `json:"type"`
}

// RolleoppdateringData Rolle data
type RolleoppdateringData struct {
	// Organisasjonsnummer Unik id-nummer tilhørende hendelsen
	Organisasjonsnummer *string `json:"organisasjonsnummer,omitempty"`
}

// Rolleoppdateringer Liste med Rolleoppdateringer
type Rolleoppdateringer = []Rolleoppdatering

// RollerBadRequestRespons Responsobjekt for 400-feilmelding med detaljer
type RollerBadRequestRespons struct {
	// AntallFeil Antallet feil som følge av ugyldige parametere
	AntallFeil *int `json:"antallFeil,omitempty"`

	// Feilmelding Feilmelding
	Feilmelding *string `json:"feilmelding,omitempty"`

	// Status HTTP-statuskode for feilmeldingen
	Status int `json:"status"`

	// Sti Sti til dette endepunktet
	Sti string `json:"sti"`

	// Tidsstempel Tidspunkt for når feilen oppstod.
	Tidsstempel *int `json:"tidsstempel,omitempty"`

	// Valideringsfeil Liste over valideringsfeil
	Valideringsfeil *[]struct {
		// FeilaktigVerdi Verdien som forårsaket feilen. OBS! Bør ikke implementers i GUI pga fare for script-injection
		FeilaktigVerdi string `json:"feilaktigVerdi"`

		// Feilmelding Nøyaktig beskrivelse av feilen
		Feilmelding string `json:"feilmelding"`

		// Parametere Liste over gjeldende parametere
		Parametere []string `json:"parametere"`
	} `json:"valideringsfeil,omitempty"`
}

// Rolletype Rolletype, og beskrivelse av typen
type Rolletype struct {
	// Links Lenke for rolletype
	Links struct {
		Self struct {
			// Href Self-link for rolletype
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// Beskrivelse Beskrivelse av rolletypen
	Beskrivelse string `json:"beskrivelse"`

	// Kode Kode for rolletype
	Kode string `json:"kode"`
}

// Rolletyper Liste med rolletyper
type Rolletyper struct {
	// Embedded HAL embedded objekt
	Embedded *struct {
		// Links Lenke for rolletype
		Links *struct {
			Self *struct {
				// Href Self-link for rolletype
				Href string `json:"href"`
			} `json:"self,omitempty"`
		} `json:"_links,omitempty"`

		// Rolletyper Liste med rolletyper
		Rolletyper *[]Rolletype `json:"rolletyper,omitempty"`
	} `json:"_embedded,omitempty"`

	// Links Lenke for rolletyper
	Links *struct {
		Self *struct {
			// Href Self-link for rolletyper
			Href string `json:"href"`
		} `json:"self,omitempty"`
	} `json:"_links,omitempty"`
}

// ServerErrorRespons Respons for generisk feilmelding
type ServerErrorRespons struct {
	// Error HTTP beskrivelse for status
	Error *string `json:"error,omitempty"`

	// Message En tekstlig beskrivelse av feilen
	Message *string `json:"message,omitempty"`

	// Path Sti til dette endepunktet
	Path *string `json:"path,omitempty"`

	// Status HTTP statuskode for feilmeldingen
	Status *string `json:"status,omitempty"`

	// Timestamp Tidspunkt feilen oppstod. Format er ISO-8601
	Timestamp *string `json:"timestamp,omitempty"`

	// Trace En tilfeldig generert UUID. Hvis du trenger hjelp, så kan du sende denne til oss. Da kan vi finne feilen raskere.
	Trace *string `json:"trace,omitempty"`
}

// Verge defines model for Verge.
type Verge struct {
	// ErDoed Om hvorvidt vergen er død
	ErDoed bool `json:"erDoed"`

	// Fodselsdato Vergens fødselsdato
	Fodselsdato string `json:"fodselsdato"`

	// Navn Vergens fulle navn
	Navn struct {
		// Etternavn Vergens etternavn
		Etternavn string `json:"etternavn"`

		// Fornavn Vergens fornavn
		Fornavn string `json:"fornavn"`

		// Mellomnavn Vergens mellomnavn
		Mellomnavn *string `json:"mellomnavn,omitempty"`
	} `json:"navn"`
}

// N200ApplicationHalPlusJSON Responsobjekt med navn, rollegrupper og self-link
type N200ApplicationHalPlusJSON = RolleRespons

// N200ApplicationJSON Responsobjekt med navn, rollegrupper og self-link
type N200ApplicationJSON = RolleRespons

// N200ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON Responsobjekt med navn, rollegrupper og self-link
type N200ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON = RolleRespons

// N200RepresentantApplicationHalPlusJSON Kode og beskrivelse av hvem rollen representerer (ikke innehaver)
type N200RepresentantApplicationHalPlusJSON = Representant

// N200RepresentantApplicationJSON Kode og beskrivelse av hvem rollen representerer (ikke innehaver)
type N200RepresentantApplicationJSON = Representant

// N200RepresentantApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON Kode og beskrivelse av hvem rollen representerer (ikke innehaver)
type N200RepresentantApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON = Representant

// N200RepresentanterApplicationHalPlusJSON Liste med representanter
type N200RepresentanterApplicationHalPlusJSON = Representanter

// N200RepresentanterApplicationJSON Liste med representanter
type N200RepresentanterApplicationJSON = Representanter

// N200RepresentanterApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON Liste med representanter
type N200RepresentanterApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON = Representanter

// N200RollegruppetypeApplicationHalPlusJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetypeApplicationHalPlusJSON = Rollegruppetype

// N200RollegruppetypeApplicationJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetypeApplicationJSON = Rollegruppetype

// N200RollegruppetypeApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetypeApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON = Rollegruppetype

// N200RollegruppetyperApplicationHalPlusJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetyperApplicationHalPlusJSON = Rollegruppetyper

// N200RollegruppetyperApplicationJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetyperApplicationJSON = Rollegruppetyper

// N200RollegruppetyperApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON Rollegruppetype, og beskrivelse av typen
type N200RollegruppetyperApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON = Rollegruppetyper

// N200Rolleoppdateringer Liste med Rolleoppdateringer
type N200Rolleoppdateringer = Rolleoppdateringer

// N200RolletypeApplicationHalPlusJSON Rolletype, og beskrivelse av typen
type N200RolletypeApplicationHalPlusJSON = Rolletype

// N200RolletypeApplicationJSON Rolletype, og beskrivelse av typen
type N200RolletypeApplicationJSON = Rolletype

// N200RolletypeApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON Rolletype, og beskrivelse av typen
type N200RolletypeApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON = Rolletype

// N200RolletyperApplicationHalPlusJSON Liste med rolletyper
type N200RolletyperApplicationHalPlusJSON = Rolletyper

// N200RolletyperApplicationJSON Liste med rolletyper
type N200RolletyperApplicationJSON = Rolletyper

// N200RolletyperApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON Liste med rolletyper
type N200RolletyperApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON = Rolletyper

// N400ApplicationHalPlusJSON Responsobjekt for 400-feilmelding med detaljer
type N400ApplicationHalPlusJSON = RollerBadRequestRespons

// N400ApplicationJSON Responsobjekt for 400-feilmelding med detaljer
type N400ApplicationJSON = RollerBadRequestRespons

// N400ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON Responsobjekt for 400-feilmelding med detaljer
type N400ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON = RollerBadRequestRespons

// N500ApplicationHalPlusJSON Respons for generisk feilmelding
type N500ApplicationHalPlusJSON = ServerErrorRespons

// N500ApplicationJSON Respons for generisk feilmelding
type N500ApplicationJSON = ServerErrorRespons

// N500ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON Respons for generisk feilmelding
type N500ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON = ServerErrorRespons

// GetRolleoppdateringerParams defines parameters for GetRolleoppdateringer.
type GetRolleoppdateringerParams struct {
	// Organisasjonsnummer Filtrer hendelser på organisasjonsnummeret til enheten
	Organisasjonsnummer *string `form:"organisasjonsnummer,omitempty" json:"organisasjonsnummer,omitempty"`

	// AfterTime Hent heldelser som har oppstått etter angitt tidspunkt.
	AfterTime *string `form:"afterTime,omitempty" json:"afterTime,omitempty"`

	// AfterId Hent hendelser som har oppstått etter angitt ID
	AfterId *int `form:"afterId,omitempty" json:"afterId,omitempty"`

	// Size Hent et spesifisert antall hendelser
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRoller request
	GetRoller(ctx context.Context, organisasjonsnummer string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolleoppdateringer request
	GetRolleoppdateringer(ctx context.Context, params *GetRolleoppdateringerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepresentanter request
	GetRepresentanter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepresentant request
	GetRepresentant(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRollegruppetyper request
	GetRollegruppetyper(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRollegruppetype request
	GetRollegruppetype(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolletyper request
	GetRolletyper(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolletype request
	GetRolletype(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRollerTotalbestand request
	GetRollerTotalbestand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRoller(ctx context.Context, organisasjonsnummer string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRollerRequest(c.Server, organisasjonsnummer)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolleoppdateringer(ctx context.Context, params *GetRolleoppdateringerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolleoppdateringerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepresentanter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepresentanterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepresentant(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepresentantRequest(c.Server, kode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRollegruppetyper(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRollegruppetyperRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRollegruppetype(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRollegruppetypeRequest(c.Server, kode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolletyper(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolletyperRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolletype(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolletypeRequest(c.Server, kode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRollerTotalbestand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRollerTotalbestandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRollerRequest generates requests for GetRoller
func NewGetRollerRequest(server string, organisasjonsnummer string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisasjonsnummer", runtime.ParamLocationPath, organisasjonsnummer)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enheter/%s/roller", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolleoppdateringerRequest generates requests for GetRolleoppdateringer
func NewGetRolleoppdateringerRequest(server string, params *GetRolleoppdateringerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oppdateringer/roller")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Organisasjonsnummer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organisasjonsnummer", runtime.ParamLocationQuery, *params.Organisasjonsnummer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AfterTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afterTime", runtime.ParamLocationQuery, *params.AfterTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AfterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "afterId", runtime.ParamLocationQuery, *params.AfterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepresentanterRequest generates requests for GetRepresentanter
func NewGetRepresentanterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/representanter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepresentantRequest generates requests for GetRepresentant
func NewGetRepresentantRequest(server string, kode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kode", runtime.ParamLocationPath, kode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/representanter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRollegruppetyperRequest generates requests for GetRollegruppetyper
func NewGetRollegruppetyperRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/rollegruppetyper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRollegruppetypeRequest generates requests for GetRollegruppetype
func NewGetRollegruppetypeRequest(server string, kode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kode", runtime.ParamLocationPath, kode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/rollegruppetyper/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolletyperRequest generates requests for GetRolletyper
func NewGetRolletyperRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/rolletyper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolletypeRequest generates requests for GetRolletype
func NewGetRolletypeRequest(server string, kode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kode", runtime.ParamLocationPath, kode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/rolletyper/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRollerTotalbestandRequest generates requests for GetRollerTotalbestand
func NewGetRollerTotalbestandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/roller/totalbestand")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRollerWithResponse request
	GetRollerWithResponse(ctx context.Context, organisasjonsnummer string, reqEditors ...RequestEditorFn) (*GetRollerResponse, error)

	// GetRolleoppdateringerWithResponse request
	GetRolleoppdateringerWithResponse(ctx context.Context, params *GetRolleoppdateringerParams, reqEditors ...RequestEditorFn) (*GetRolleoppdateringerResponse, error)

	// GetRepresentanterWithResponse request
	GetRepresentanterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRepresentanterResponse, error)

	// GetRepresentantWithResponse request
	GetRepresentantWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRepresentantResponse, error)

	// GetRollegruppetyperWithResponse request
	GetRollegruppetyperWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRollegruppetyperResponse, error)

	// GetRollegruppetypeWithResponse request
	GetRollegruppetypeWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRollegruppetypeResponse, error)

	// GetRolletyperWithResponse request
	GetRolletyperWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolletyperResponse, error)

	// GetRolletypeWithResponse request
	GetRolletypeWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRolletypeResponse, error)

	// GetRollerTotalbestandWithResponse request
	GetRollerTotalbestandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRollerTotalbestandResponse, error)
}

type GetRollerResponse struct {
	Body                                              []byte
	HTTPResponse                                      *http.Response
	HALJSON200                                        *N200ApplicationHalPlusJSON
	JSON200                                           *N200ApplicationJSON
	ApplicationvndBrregEnhetsregisteretRolleV1JSON200 *N200ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
	HALJSON400                                        *N400ApplicationHalPlusJSON
	JSON400                                           *N400ApplicationJSON
	ApplicationvndBrregEnhetsregisteretRolleV1JSON400 *N400ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
	HALJSON500                                        *N500ApplicationHalPlusJSON
	JSON500                                           *N500ApplicationJSON
	ApplicationvndBrregEnhetsregisteretRolleV1JSON500 *N500ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRollerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRollerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolleoppdateringerResponse struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationcloudeventsBatchJSON200 *N200Rolleoppdateringer
}

// Status returns HTTPResponse.Status
func (r GetRolleoppdateringerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolleoppdateringerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepresentanterResponse struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	HALJSON200                                               *N200RepresentanterApplicationHalPlusJSON
	JSON200                                                  *N200RepresentanterApplicationJSON
	ApplicationvndBrregEnhetsregisteretRepresentantV1JSON200 *N200RepresentanterApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRepresentanterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepresentanterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepresentantResponse struct {
	Body                                                     []byte
	HTTPResponse                                             *http.Response
	HALJSON200                                               *N200RepresentantApplicationHalPlusJSON
	JSON200                                                  *N200RepresentantApplicationJSON
	ApplicationvndBrregEnhetsregisteretRepresentantV1JSON200 *N200RepresentantApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRepresentantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepresentantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRollegruppetyperResponse struct {
	Body                                                        []byte
	HTTPResponse                                                *http.Response
	HALJSON200                                                  *N200RollegruppetyperApplicationHalPlusJSON
	JSON200                                                     *N200RollegruppetyperApplicationJSON
	ApplicationvndBrregEnhetsregisteretRollegruppetypeV1JSON200 *N200RollegruppetyperApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRollegruppetyperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRollegruppetyperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRollegruppetypeResponse struct {
	Body                                                        []byte
	HTTPResponse                                                *http.Response
	HALJSON200                                                  *N200RollegruppetypeApplicationHalPlusJSON
	JSON200                                                     *N200RollegruppetypeApplicationJSON
	ApplicationvndBrregEnhetsregisteretRollegruppetypeV1JSON200 *N200RollegruppetypeApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRollegruppetypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRollegruppetypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolletyperResponse struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	HALJSON200                                            *N200RolletyperApplicationHalPlusJSON
	JSON200                                               *N200RolletyperApplicationJSON
	ApplicationvndBrregEnhetsregisteretRolletypeV1JSON200 *N200RolletyperApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRolletyperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolletyperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolletypeResponse struct {
	Body                                                  []byte
	HTTPResponse                                          *http.Response
	HALJSON200                                            *N200RolletypeApplicationHalPlusJSON
	JSON200                                               *N200RolletypeApplicationJSON
	ApplicationvndBrregEnhetsregisteretRolletypeV1JSON200 *N200RolletypeApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON
}

// Status returns HTTPResponse.Status
func (r GetRolletypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolletypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRollerTotalbestandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRollerTotalbestandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRollerTotalbestandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRollerWithResponse request returning *GetRollerResponse
func (c *ClientWithResponses) GetRollerWithResponse(ctx context.Context, organisasjonsnummer string, reqEditors ...RequestEditorFn) (*GetRollerResponse, error) {
	rsp, err := c.GetRoller(ctx, organisasjonsnummer, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRollerResponse(rsp)
}

// GetRolleoppdateringerWithResponse request returning *GetRolleoppdateringerResponse
func (c *ClientWithResponses) GetRolleoppdateringerWithResponse(ctx context.Context, params *GetRolleoppdateringerParams, reqEditors ...RequestEditorFn) (*GetRolleoppdateringerResponse, error) {
	rsp, err := c.GetRolleoppdateringer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolleoppdateringerResponse(rsp)
}

// GetRepresentanterWithResponse request returning *GetRepresentanterResponse
func (c *ClientWithResponses) GetRepresentanterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRepresentanterResponse, error) {
	rsp, err := c.GetRepresentanter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepresentanterResponse(rsp)
}

// GetRepresentantWithResponse request returning *GetRepresentantResponse
func (c *ClientWithResponses) GetRepresentantWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRepresentantResponse, error) {
	rsp, err := c.GetRepresentant(ctx, kode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepresentantResponse(rsp)
}

// GetRollegruppetyperWithResponse request returning *GetRollegruppetyperResponse
func (c *ClientWithResponses) GetRollegruppetyperWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRollegruppetyperResponse, error) {
	rsp, err := c.GetRollegruppetyper(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRollegruppetyperResponse(rsp)
}

// GetRollegruppetypeWithResponse request returning *GetRollegruppetypeResponse
func (c *ClientWithResponses) GetRollegruppetypeWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRollegruppetypeResponse, error) {
	rsp, err := c.GetRollegruppetype(ctx, kode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRollegruppetypeResponse(rsp)
}

// GetRolletyperWithResponse request returning *GetRolletyperResponse
func (c *ClientWithResponses) GetRolletyperWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolletyperResponse, error) {
	rsp, err := c.GetRolletyper(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolletyperResponse(rsp)
}

// GetRolletypeWithResponse request returning *GetRolletypeResponse
func (c *ClientWithResponses) GetRolletypeWithResponse(ctx context.Context, kode string, reqEditors ...RequestEditorFn) (*GetRolletypeResponse, error) {
	rsp, err := c.GetRolletype(ctx, kode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolletypeResponse(rsp)
}

// GetRollerTotalbestandWithResponse request returning *GetRollerTotalbestandResponse
func (c *ClientWithResponses) GetRollerTotalbestandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRollerTotalbestandResponse, error) {
	rsp, err := c.GetRollerTotalbestand(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRollerTotalbestandResponse(rsp)
}

// ParseGetRollerResponse parses an HTTP response from a GetRollerWithResponse call
func ParseGetRollerResponse(rsp *http.Response) (*GetRollerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRollerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200ApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 400:
		var dest N400ApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 500:
		var dest N500ApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200ApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest N400ApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest N500ApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rolle.v1+json" && rsp.StatusCode == 200:
		var dest N200ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRolleV1JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rolle.v1+json" && rsp.StatusCode == 400:
		var dest N400ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRolleV1JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rolle.v1+json" && rsp.StatusCode == 500:
		var dest N500ApplicationVndBrregEnhetsregisteretRolleV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRolleV1JSON500 = &dest

	}

	return response, nil
}

// ParseGetRolleoppdateringerResponse parses an HTTP response from a GetRolleoppdateringerWithResponse call
func ParseGetRolleoppdateringerResponse(rsp *http.Response) (*GetRolleoppdateringerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolleoppdateringerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest N200Rolleoppdateringer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationcloudeventsBatchJSON200 = &dest

	}

	return response, nil
}

// ParseGetRepresentanterResponse parses an HTTP response from a GetRepresentanterWithResponse call
func ParseGetRepresentanterResponse(rsp *http.Response) (*GetRepresentanterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepresentanterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RepresentanterApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RepresentanterApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.representant.v1+json" && rsp.StatusCode == 200:
		var dest N200RepresentanterApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRepresentantV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRepresentantResponse parses an HTTP response from a GetRepresentantWithResponse call
func ParseGetRepresentantResponse(rsp *http.Response) (*GetRepresentantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepresentantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RepresentantApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RepresentantApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.representant.v1+json" && rsp.StatusCode == 200:
		var dest N200RepresentantApplicationVndBrregEnhetsregisteretRepresentantV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRepresentantV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRollegruppetyperResponse parses an HTTP response from a GetRollegruppetyperWithResponse call
func ParseGetRollegruppetyperResponse(rsp *http.Response) (*GetRollegruppetyperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRollegruppetyperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RollegruppetyperApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RollegruppetyperApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rollegruppetype.v1+json" && rsp.StatusCode == 200:
		var dest N200RollegruppetyperApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRollegruppetypeV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRollegruppetypeResponse parses an HTTP response from a GetRollegruppetypeWithResponse call
func ParseGetRollegruppetypeResponse(rsp *http.Response) (*GetRollegruppetypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRollegruppetypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RollegruppetypeApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RollegruppetypeApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rollegruppetype.v1+json" && rsp.StatusCode == 200:
		var dest N200RollegruppetypeApplicationVndBrregEnhetsregisteretRollegruppetypeV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRollegruppetypeV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolletyperResponse parses an HTTP response from a GetRolletyperWithResponse call
func ParseGetRolletyperResponse(rsp *http.Response) (*GetRolletyperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolletyperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RolletyperApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RolletyperApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rolletype.v1+json" && rsp.StatusCode == 200:
		var dest N200RolletyperApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRolletypeV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolletypeResponse parses an HTTP response from a GetRolletypeWithResponse call
func ParseGetRolletypeResponse(rsp *http.Response) (*GetRolletypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolletypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest N200RolletypeApplicationHalPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest N200RolletypeApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.brreg.enhetsregisteret.rolletype.v1+json" && rsp.StatusCode == 200:
		var dest N200RolletypeApplicationVndBrregEnhetsregisteretRolletypeV1PlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndBrregEnhetsregisteretRolletypeV1JSON200 = &dest

	}

	return response, nil
}

// ParseGetRollerTotalbestandResponse parses an HTTP response from a GetRollerTotalbestandWithResponse call
func ParseGetRollerTotalbestandResponse(rsp *http.Response) (*GetRollerTotalbestandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRollerTotalbestandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
